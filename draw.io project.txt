<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>Drag and Drop with Node Connections</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
   integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <style>
    /* CSS styles */

    #sidebar {
      width: 200px;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      background-color: #f1f1f1;
      padding: 10px;
    }

    #canvas {
      width: calc(100% - 200px);
      height: 100%;
      background-color: #f1f1f1;
      position: absolute;
      top: 0;
      right: 0;
    }

    .element {
      width: 100%;
      height: 30px;
      background-color: #ccc;
      border: 1px solid #999;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      user-select: none;
      font-size: 14px;
    }

    .node {
      width: 100px;
      height: 100px;
      background-color: #ccc;
      border: 1px solid #999;
      position: absolute;
      cursor: move;
      display: flex;
      align-items: center;
      justify-content: center;
      user-select: none;
      font-size: 14px;
    }

    .node textarea {
      width: 80%;
      height: 60px;
      resize: none;
      border: none;
      background-color: transparent;
      text-align: center;
    }

    .connector {
      width: 10px;
      height: 10px;
      background-color: #999;
      border-radius: 50%;
      position: absolute;
      cursor: pointer;
    }

    .connector.input {
      left: -5px;
      top: 45px;
    }

    .connector.output {
      right: -5px;
      top: 45px;
    }

    .connector.active {
      background-color: red;
    }

    .link {
      stroke: black;
      stroke-width: 2px;
    }
  </style>
</head>
<body>
  <div class="card shadow-lg " id="sidebar">
    <div class="element" draggable="true" data-shape="rectangle">Rectangle</div>
    <div class="element" draggable="true" data-shape="circle">Circle</div>
    <div class="element" draggable="true" data-shape="diamond">Diamond</div>
  </div>
  <div class="card shadow-lg m-1" id="canvas"></div>

  <script>
    // JavaScript code
    var sidebar = document.getElementById("sidebar");
    var canvas = document.getElementById("canvas");
    var nodes = [];
    var activeNode = null;
    var initialNodeX = 0;
    var initialNodeY = 0;
    var initialMouseX = 0;
    var initialMouseY = 0;
    var scaleFactor = 1;
    var connectors = [];

    sidebar.addEventListener("dragstart", function(event) {
      event.dataTransfer.setData("text/plain", event.target.dataset.shape);
    });

    canvas.addEventListener("dragover", function(event) {
      event.preventDefault();
    });

    canvas.addEventListener("drop", function(event) {
      event.preventDefault();
      var shape = event.dataTransfer.getData("text/plain");
      var x = event.clientX - canvas.getBoundingClientRect().left;
      var y = event.clientY - canvas.getBoundingClientRect().top;
      createNode(x, y, shape);
    });

    function createNode(x, y, shape) {
      var node = document.createElement("div");
      node.className = "node";
      node.style.left = x + "px";
      node.style.top = y + "px";
      node.draggable = true;

      if (shape === "rectangle") {
        node.style.borderRadius = "0";
      } else if (shape === "circle") {
        node.style.borderRadius = "50%";
      } else if (shape === "diamond") {
        node.style.transform = "rotate(45deg)";
      }

      var textarea = document.createElement("textarea");
      textarea.textContent = "Element " + (nodes.length + 1);
      textarea.readOnly = true;
      node.appendChild(textarea);

      var inputConnector = document.createElement("div");
      inputConnector.className = "connector input";
      node.appendChild(inputConnector);

      var outputConnector = document.createElement("div");
      outputConnector.className = "connector output";
      node.appendChild(outputConnector);

      node.addEventListener("dragstart", function(event) {
        event.stopPropagation();
        activeNode = this;
      });

      node.addEventListener("dragend", function(event) {
        event.stopPropagation();
        activeNode = null;
      });

      node.addEventListener("mousedown", function(event) {
        event.stopPropagation();
        if (event.target === this) {
          activeNode = this;
          initialMouseX = event.clientX;
          initialMouseY = event.clientY;
          initialNodeX = parseInt(this.style.left);
          initialNodeY = parseInt(this.style.top);
        }
      });

      node.addEventListener("mousemove", function(event) {
        event.stopPropagation();
        if (activeNode === this) {
          var deltaX = event.clientX - initialMouseX;
          var deltaY = event.clientY - initialMouseY;
          var newNodeX = initialNodeX + deltaX;
          var newNodeY = initialNodeY + deltaY;
          this.style.left = newNodeX + "px";
          this.style.top = newNodeY + "px";
          updateNodeConnections(this);
        }
      });

      node.addEventListener("mouseup", function(event) {
        event.stopPropagation();
      });

      node.addEventListener("wheel", function(event) {
        event.stopPropagation();
        var scaleDelta = event.deltaY > 0 ? -0.1 : 0.1;
        scaleFactor += scaleDelta;
        scaleFactor = Math.max(0.1, scaleFactor);
        this.style.transform = "scale(" + scaleFactor + ")";
        updateNodeConnections(this);
      });

      node.addEventListener("dblclick", function(event) {
        event.stopPropagation();
        var textarea = this.querySelector("textarea");
        textarea.removeAttribute("readonly");
        textarea.focus();
      });

      node.addEventListener("focusout", function(event) {
        event.stopPropagation();
        var textarea = this.querySelector("textarea");
        textarea.setAttribute("readonly", true);
      });

      nodes.push(node);
      canvas.appendChild(node);
      updateNodeConnections(node);
    }

    function updateNodeConnections(node) {
      clearConnections(node);
      connectors.forEach(function(connector) {
        if (isConnected(node, connector)) {
          createConnection(node, connector);
        }
      });
    }

    function isConnected(node1, node2) {
      return (
        node1 !== node2 &&
        !(node1 === activeNode && node2 === activeNode) &&
        !(node1 === activeNode && node2 === activeNode)
      );
    }

    function createConnection(node1, node2) {
      var line = document.createElementNS("http://www.w3.org/2000/svg", "line");
      line.setAttribute("class", "link");
      line.setAttribute("x1", getCenterX(node1) + "px");
      line.setAttribute("y1", getCenterY(node1) + "px");
      line.setAttribute("x2", getCenterX(node2) + "px");
      line.setAttribute("y2", getCenterY(node2) + "px");
      canvas.appendChild(line);
    }

    function clearConnections(node) {
      var lines = canvas.getElementsByClassName("link");
      while (lines.length > 0) {
        lines[0].parentNode.removeChild(lines[0]);
      }
    }

    function getCenterX(element) {
      var rect = element.getBoundingClientRect();
      return rect.left + rect.width / 2;
    }

    function getCenterY(element) {
      var rect = element.getBoundingClientRect();
      return rect.top + rect.height / 2;
    }
  </script>
</body>
</html>

example 2 




<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>Drag and Drop with Node Connections</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
   integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <style>
    /* CSS styles */

    #sidebar {
      width: 200px;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      background-color: #f1f1f1;
      padding: 10px;
    }

    #canvas {
      width: calc(100% - 200px);
      height: 100%;
      background-color: #f1f1f1;
      position: absolute;
      top: 0;
      right: 0;
    }

    .element {
      width: 100%;
      height: 30px;
      background-color: #ccc;
      border: 1px solid #999;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      user-select: none;
      font-size: 14px;
    }

    .node {
      width: 100px;
      height: 100px;
      background-color: #ccc;
      border: 1px solid #999;
      position: absolute;
      cursor: move;
      display: flex;
      align-items: center;
      justify-content: center;
      user-select: none;
      font-size: 14px;
    }

    .node textarea {
      width: 80%;
      height: 60px;
      resize: none;
      border: none;
      background-color: transparent;
      text-align: center;
    }

    .connector {
      width: 10px;
      height: 10px;
      background-color: #999;
      border-radius: 50%;
      position: absolute;
      cursor: pointer;
    }

    .connector.input {
      left: -5px;
      top: 45px;
    }

    .connector.output {
      right: -5px;
      top: 45px;
    }

    .connector.active {
      background-color: red;
    }

    .link {
      stroke: black;
      stroke-width: 2px;
    }

    .close-button {
      position: absolute;
      top: 5px;
      right: 5px;
      background: none;
      border: none;
      cursor: pointer;
      font-size: 14px;
      font-weight: bold;
      color: red;
    }
  </style>
</head>
<body>
  <div class="card shadow-lg" id="sidebar">
    <div class="element" draggable="true" data-shape="rectangle">Rectangle</div>
    <div class="element" draggable="true" data-shape="circle">Circle</div>
    <div class="element" draggable="true" data-shape="diamond">Diamond</div>
  </div>
  <div class="card shadow-lg m-1" id="canvas"></div>

  <script>
    // JavaScript code
    var sidebar = document.getElementById("sidebar");
    var canvas = document.getElementById("canvas");
    var nodes = [];
    var activeNode = null;
    var initialNodeX = 0;
    var initialNodeY = 0;
    var initialMouseX = 0;
    var initialMouseY = 0;
    var scaleFactor = 1;
    var connectors = [];
    var canvasContainer = document.getElementById("canvas");

    sidebar.addEventListener("dragstart", function(event) {
      event.dataTransfer.setData("text/plain", event.target.dataset.shape);
    });

    canvas.addEventListener("dragover", function(event) {
      event.preventDefault();
    });

    canvas.addEventListener("drop", function(event) {
      event.preventDefault();
      var shape = event.dataTransfer.getData("text/plain");
      var x = event.clientX - canvas.getBoundingClientRect().left;
      var y = event.clientY - canvas.getBoundingClientRect().top;
      createNode(x, y, shape);
    });

    function createNode(x, y, shape) {
      var node = document.createElement("div");
      node.className = "node";
      node.style.left = x + "px";
      node.style.top = y + "px";
      node.draggable = true;

      if (shape === "rectangle") {
        node.style.borderRadius = "0";
      } else if (shape === "circle") {
        node.style.borderRadius = "50%";
      } else if (shape === "diamond") {
        node.style.transform = "rotate(45deg)";
      }

      var closeButton = document.createElement("button");
      closeButton.className = "close-button";
      closeButton.textContent = "x";
      node.appendChild(closeButton);

      var textarea = document.createElement("textarea");
      textarea.textContent = "Element " + (nodes.length + 1);
      textarea.readOnly = true;
      node.appendChild(textarea);

      var inputConnector = document.createElement("div");
      inputConnector.className = "connector input";
      node.appendChild(inputConnector);

      var outputConnector = document.createElement("div");
      outputConnector.className = "connector output";
      node.appendChild(outputConnector);

      node.addEventListener("dragstart", function(event) {
        event.stopPropagation();
        activeNode = this;
      });

      node.addEventListener("dragend", function(event) {
        event.stopPropagation();
        activeNode = null;
      });

      node.addEventListener("mousedown", function(event) {
        event.stopPropagation();
        if (event.target === this) {
          activeNode = this;
          initialMouseX = event.clientX;
          initialMouseY = event.clientY;
          initialNodeX = parseInt(this.style.left);
          initialNodeY = parseInt(this.style.top);
        }
      });

      node.addEventListener("mousemove", function(event) {
        event.stopPropagation();
        if (activeNode === this) {
          var deltaX = event.clientX - initialMouseX;
          var deltaY = event.clientY - initialMouseY;
          var newNodeX = initialNodeX + deltaX;
          var newNodeY = initialNodeY + deltaY;
          this.style.left = newNodeX + "px";
          this.style.top = newNodeY + "px";
          updateNodeConnections(this);
        }
      });

      node.addEventListener("mouseup", function(event) {
        event.stopPropagation();
      });

      node.addEventListener("wheel", function(event) {
        event.stopPropagation();
        var scaleDelta = event.deltaY > 0 ? -0.1 : 0.1;
        scaleFactor += scaleDelta;
        scaleFactor = Math.max(0.1, scaleFactor);
        this.style.transform = "scale(" + scaleFactor + ")";
        updateNodeConnections(this);
      });

      node.addEventListener("dblclick", function(event) {
        event.stopPropagation();
        var textarea = this.querySelector("textarea");
        textarea.removeAttribute("readonly");
        textarea.focus();
      });

      node.addEventListener("focusout", function(event) {
        event.stopPropagation();
        var textarea = this.querySelector("textarea");
        textarea.setAttribute("readonly", true);
      });

      closeButton.addEventListener("click", function(event) {
        event.stopPropagation();
        removeNode(node);
      });

      canvas.appendChild(node);
      nodes.push(node);
      updateNodeConnections(node);
    }

    function removeNode(node) {
      var index = nodes.indexOf(node);
      if (index !== -1) {
        nodes.splice(index, 1);
        canvas.removeChild(node);
        updateNodeConnections();
      }
    }

    function updateNodeConnections(node) {
      connectors.forEach(function(connector) {
        canvasContainer.removeChild(connector);
      });

      connectors = [];

      nodes.forEach(function(nodeA) {
        nodes.forEach(function(nodeB) {
          if (nodeA !== nodeB) {
            var inputConnectorA = nodeA.querySelector(".connector.input");
            var outputConnectorA = nodeA.querySelector(".connector.output");
            var inputConnectorB = nodeB.querySelector(".connector.input");
            var outputConnectorB = nodeB.querySelector(".connector.output");

            var rectA = outputConnectorA.getBoundingClientRect();
            var rectB = inputConnectorB.getBoundingClientRect();

            var x1 = rectA.left + rectA.width / 2;
            var y1 = rectA.top + rectA.height / 2;
            var x2 = rectB.left + rectB.width / 2;
            var y2 = rectB.top + rectB.height / 2;

            var connector = document.createElementNS("http://www.w3.org/2000/svg", "line");
            connector.setAttribute("class", "link");
            connector.setAttribute("x1", x1);
            connector.setAttribute("y1", y1);
            connector.setAttribute("x2", x2);
            connector.setAttribute("y2", y2);

            connectors.push(connector);
            canvasContainer.appendChild(connector);
          }
        });
      });
    }
  </script>
</body>
</html>




explanation:-

var sidebar = document.getElementById("sidebar");

This line retrieves the HTML element with the ID "sidebar" and assigns it to the sidebar variable.
var canvas = document.getElementById("canvas");

This line retrieves the HTML element with the ID "canvas" and assigns it to the canvas variable.
var nodes = [];

This line creates an empty array named nodes that will be used to store references to the created nodes.
var activeNode = null;

This line initializes the activeNode variable to null. It will be used to keep track of the currently active (selected) node.
var initialNodeX = 0;

This line initializes the initialNodeX variable to 0. It will be used to store the initial X-coordinate of a node during drag and drop.
var initialNodeY = 0;

This line initializes the initialNodeY variable to 0. It will be used to store the initial Y-coordinate of a node during drag and drop.
var initialMouseX = 0;

This line initializes the initialMouseX variable to 0. It will be used to store the initial X-coordinate of the mouse during drag and drop.
var initialMouseY = 0;

This line initializes the initialMouseY variable to 0. It will be used to store the initial Y-coordinate of the mouse during drag and drop.
var scaleFactor = 1;

This line initializes the scaleFactor variable to 1. It will be used to store the scaling factor for resizing nodes.
var connectors = [];

This line creates an empty array named connectors that will be used to store references to the created connectors.
var canvasContainer = document.getElementById("canvas");

This line retrieves the HTML element with the ID "canvas" again and assigns it to the canvasContainer variable. It will be used to append connectors to the canvas.
sidebar.addEventListener("dragstart", function(event) {

This line adds a "dragstart" event listener to the sidebar element. It listens for when the user starts dragging an element from the sidebar.
event.dataTransfer.setData("text/plain", event.target.dataset.shape);

This line sets the data to be transferred during the drag operation. It sets the data as the shape of the dragged element.
canvas.addEventListener("dragover", function(event) {

This line adds a "dragover" event listener to the canvas element. It listens for when a dragged element is being dragged over the canvas.
event.preventDefault();

This line prevents the default behavior of the browser when a dragged element is being dragged over the canvas. It allows dropping elements on the canvas.
canvas.addEventListener("drop", function(event) {

This line adds a "drop" event listener to the canvas element. It listens for when a dragged element is dropped onto the canvas.
event.preventDefault();

This line prevents the default behavior of the browser when a dragged element is dropped onto the canvas.
var shape = event.dataTransfer.getData("text/plain");

This line retrieves the shape data of the dropped element from the drag event data.
var x = event.clientX - canvas.getBoundingClientRect().left;

This line calculates the X-coordinate of the drop position relative to the canvas.
var y = event.clientY - canvas.getBoundingClientRect().top;

This line calculates the Y-coordinate of the drop position relative to the canvas.
createNode(x, y, shape);

This line calls the createNode function, passing the drop coordinates and the shape of the dropped element.
function createNode(x, y, shape) {

This line declares the createNode function, which is responsible for creating a new node element on the canvas.
var node = document.createElement("div");

This line creates a new HTML div element and assigns it to the node variable. This div represents the newly created node.
node.className = "node";

This line sets the CSS class of the node element to "node". This class is used to apply styling to the node.
node.style.left = x + "px";

This line sets the left CSS property of the node element to the provided X-coordinate, positioning the node horizontally.
node.style.top = y + "px";

This line sets the top CSS property of the node element to the provided Y-coordinate, positioning the node vertically.
node.draggable = true;

This line sets the draggable attribute of the node element to true, allowing it to be draggable.
37-43. These lines check the shape of the node being created and apply appropriate CSS styles to customize its appearance based on the shape (rectangle, circle, or diamond).

45-48. These lines create the close button element, assign it a class, add a text content, and append it as a child to the node element.

50-53. These lines create a textarea element, set its initial content, make it read-only, and append it as a child to the node element.

55-59. These lines create the input and output connectors for the node by creating div elements and appending them as children to the node element.

61-74. These lines add various event listeners to the node element to handle drag and drop, mouse interaction, resizing, editing content, and node removal.

canvas.appendChild(node);
This line appends the node element as a child to the canvas element, making it visible on the canvas.
77-78. These lines add the node element to the nodes array and call the updateNodeConnections function to update the node connections.

function removeNode(node) {
This line declares the removeNode function, which is responsible for removing a node from the canvas.
82-86. These lines find the index of the node in the nodes array, remove the node from the canvas and the nodes array, and call the updateNodeConnections function to update the node connections.

88-138. These lines define the updateNodeConnections function, which updates the connections between nodes by creating connector elements and appending them to the canvas.

updateNodeConnections();
- This line calls the updateNodeConnections function without passing any node to update all the connections initially.
These explanations should help you understand the purpose and functionality of each line in the JavaScript code.
